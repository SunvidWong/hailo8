version: '3.8'

services:
  # Hailo8硬件加速服务
  hailo8-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: hailo8-service:latest
    container_name: hailo8-service
    restart: unless-stopped
    
    # 网络配置
    ports:
      - "8080:8080"  # API服务端口
    
    # 环境变量
    environment:
      - SERVICE_NAME=Hailo8 Hardware Acceleration Service
      - SERVICE_VERSION=1.0.0
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8080
      - LOG_LEVEL=INFO
      - HAILO_MOCK_MODE=false
      - HAILO_DEVICE_COUNT=1
      - MAX_CONCURRENT_INFERENCES=4
      - MODEL_BASE_PATH=/app/models
      - TEMP_DIR=/tmp/hailo8
    
    # 卷挂载
    volumes:
      # 模型存储目录
      - ./models:/app/models:ro
      # 临时文件目录
      - hailo8_temp:/tmp/hailo8
      # 日志目录
      - ./logs:/app/logs
      # 配置文件
      - ./config:/app/config:ro
    
    # 设备访问 - 访问Hailo8硬件
    devices:
      - /dev/hailo0:/dev/hailo0  # Hailo8设备节点
    
    # 特权模式 - 访问硬件设备
    privileged: false
    
    # 安全选项
    security_opt:
      - no-new-privileges:true
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 网络
    networks:
      - hailo8-network
    
    # 依赖服务
    depends_on:
      - redis
      - prometheus
    
    # 标签
    labels:
      - "com.hailo8.service=acceleration"
      - "com.hailo8.version=1.0.0"

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: hailo8-redis
    restart: unless-stopped
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    networks:
      - hailo8-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: hailo8-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - hailo8-network

  # Grafana可视化服务（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: hailo8-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - hailo8-network
    
    depends_on:
      - prometheus

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: hailo8-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    
    networks:
      - hailo8-network
    
    depends_on:
      - hailo8-service

# 网络配置
networks:
  hailo8-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  hailo8_temp:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local